# Import packages
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import pickle
from pandas.plotting import autocorrelation_plot
from statsmodels.tsa.stattools import acf
from sklearn.model_selection import train_test_split
from keras.utils import to_categorical
from sklearn.preprocessing import StandardScaler

with open ('data/Data_Spectrograms.pkl', 'rb') as f:
    spect = pickle.load (f)


#### Raw signals
signal_spec = np.array (spect [0])  # full data
label_spec = np.array (spect [1])  # labels

print(signal_spec.shape)

## extract data for 1st and 2nd electrode
signal_spec_1 = signal_spec [:, 0]  # first electrode
signal_spec_2 = signal_spec [:, 1]  # second electrode

## this creates 100 standardizers (for every 0.5 hz) <-- Maybe we have to standardize the other way around.
scalers1 = {}
for i in range(signal_spec_1.shape[1]):
    scalers1[i] = StandardScaler()
    signal_spec_1[:, i, :] = scalers1[i].fit_transform(signal_spec_1[:, i, :])

scalers2 = {}
for i in range(signal_spec_2.shape[1]):
    scalers2[i] = StandardScaler()
    signal_spec_2[:, i, :] = scalers2[i].fit_transform(signal_spec_2[:, i, :])

signal_spec_st = np.stack ((signal_spec_1,signal_spec_2), axis = 1)

print(signal_spec_st.shape)

X_train, X_test, y_train, y_test = train_test_split (signal_spec_st, label_spec,
                                                     test_size = 0.33, random_state = 0)

y_train_hot = to_categorical (y_train, num_classes = 6)
y_test_hot = to_categorical (y_test, num_classes = 6)



## this part is for the test data
#for i in range(X_test.shape[1]):
#    X_test[:, i, :] = scalers[i].transform(X_test[:, i, :])